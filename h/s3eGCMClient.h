/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_GCMCLIENT_H
#define S3E_EXT_GCMCLIENT_H

#include <s3eTypes.h>

/**
 * @addtogroup s3egroup
 * @{
 */

/**
 * @defgroup gcmapigroup S3E GOOGLE CLOUD MESSAGING API Reference
 *
 * This provides user access to Google Cloud Messaging library
 *
 * @supported
 * - android: On devices running android 2.2 or newer
 */

/**
 * @}
 * @addtogroup gcmapigroup
 * @{
 */
  
 /**
 * GCMClient Callbacks.
 *
 * @see s3eGCMClientNotificationRegister
 * @see s3eGCMClientNotificationUnregister
 * @par Required Header Files
 * s3eGCMClient.h
 */
typedef enum s3eGCMClientCallback
{
    /**
     * Called when a notification has received.
     */
    S3E_GCMCLIENT_CALLBACK_NOTIFICATION_RECEIVED =  0,

	/** 
	 * Max callback.
	 */
    S3E_GCMCLIENT_CALLBACK_MAX
} s3eGCMClientCallback;

/**
 * Returned by the S3E_DIALOG_FINISHED callback
 *
 * @par Required Header Files:
 * s3eGCMClient.h
 */
struct s3eGCMClientCallbackData
{

};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the GCMClient extension is available.
 */
s3eBool s3eGCMClientAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref s3eGCMClientCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see s3eGCMClientUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref s3eGCMClientCallback enum.
 */
s3eResult s3eGCMClientRegister(s3eGCMClientCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the s3eGCMClientCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see s3eGCMClientRegister
 */
s3eResult s3eGCMClientUnRegister(s3eGCMClientCallback cbid, s3eCallback fn);

/**
 * Record app specific info for notifications to use.
 *
 * @par Required Header Files
 * s3eGCMClient.h
 * @param title, is an informal string that will be displayed in any notifications that arrive on the device identifying your app. Normally set this to your game name.
 * @param title, is the resource id for the icon to display in notifications.
 */
void s3eGCMClientSetAppData(const char * title, int icon_id);

/**
 * Register a Google Cloud Messaging session.
 *
 * @par Required Header Files
 * s3eGCMClient.h
 * @param sender_id, is the project number you acquired from the Android API console
 */
const char* s3eGCMClientGetRegisterId( const char* sender_id);

void s3eGCMClientUnregisterId();

void s3eGCMClientLocalNotificationSchedule(int delaySec, int id, const char* alertBody, const char* alertAction, const char* sound);

void s3eGCMClientLocalNotificationUnschedule(int id);

void s3eGCMClientLocalNotificationEnable(bool enable);

void s3eGCMClientLocalNotificationClearAll();

S3E_END_C_DECL

/** @} */

#endif /* !S3E_EXT_GCMCLIENT_H */
